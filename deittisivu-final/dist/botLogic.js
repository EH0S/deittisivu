import testingProfiles, { getMessageCount, storedProfiles } from './shared.js';
import {findProfileByIndex} from './shared.js';
import {pushNotify} from './userHandle.js';
import {updateChatMessagesDisplay} from './logic.js';
import { getLatestMessage } from './shared.js';
import {storedYourProfile} from './shared.js';
import {enableAttention} from './shared.js';
import {enableLogs} from './shared.js';
import {playSound} from './shared.js';
import {test,userHasRespondedSinceCheck} from './shared.js';
let isAttentionCheckInProgress = false;

const greetingsTable = [
    "moiksuuu",
    "ootp√§s s√§ komee :O",
    "kiva bio sulla :)",
    "moiii mite menee?",
    "hei sin√§ siell√§!",
    "moikka, mit√§ kuuluu?",
    "hauska n√§hd√§ sinut t√§√§ll√§!",
    "hei, miten p√§iv√§si on sujunut?",
    "tere! miten menee?",
    "moi, ootpa pirte√§n n√§k√∂inen t√§n√§√§n!",
    "no moi! mit√§s sinulle?",
    "tervehdys!",
    "heippa, miten voit?",
    "moikka moi, kaikki hyvin?",
];


const insultsTable = [
    "vastaaks?",
    "huhuu onkos siel√§ ket√§√§n?",
    "ei sitte ku ignoraat. En ois sunkaa halunnukkaa jutella!",
    "no voi harmi, ei sitten vastata.",
    "n√§ytt√§√§ silt√§ ett√§ ollaan hiljaa.",
    "no huh, kylm√§ vastaanotto!",
    "ei sitten jakseta jutella?",
    "joo joo, ei sitten kiinnosta.",
    "miks ei voi vaan vastata?",
    "no ei sitten, olkoon.",
];


const randomAnswer = [
    "kiva",
    "selv√§ juttu",
    "lol okei",
    "joo",
    "juup",
    "asia selv√§",
    "ju",
    "okei sitten",
    "no niinp√§",
    "juu juu",
    "ihan jees",
    "selv√§ homma",
    "ai jaa",
    "totta kai",
    "mielenkiintoista",
    "voi olla",
    "niinp√§ niin",
    "hmm, enp√§ tied√§",
    "mit√§ mielt√§ itse olet?",
    "no voihan pyh√§ m√§nty",
    "aivan",
    "no huhhuh",
    "hmm, pohdittavaa",
    "mielenkiintoinen n√§k√∂kulma",
    "ehk√§p√§, ehk√§p√§",
    "t√§ytyy mietti√§ tuota",
    "jaa-a, saa n√§hd√§",
    "mielenkiintoista, kerro lis√§√§",
    "voi ett√§, nyt on j√§nn√§√§",
    "tuo on uusi juttu mulle",
    "voisitko selvent√§√§?",
    "hmm, en ole varma",
    "voi olla, voi olla",
    "siin√§p√§ vasta pulma",
    "tuo on hyv√§ pointti",
    "en ole ihan varma, mit√§ ajat takaa",
    "no katsotaan miten k√§y",
    "t√§ytyy mietti√§ t√§t√§",
    "vai niin, mielenkiintoista",
    "no sep√§ kummallista",
    "ei voi tiet√§√§",
    "kyll√§ maailma on ihmeellinen",
    "no onpa erikoinen juttu",
    "jaa, vai ett√§ sellaista",
    "kyll√§ maailmassa kaikenlaista sattuu",
    "no voi, ett√§ voikin olla",
    "ei ikin√§ tied√§ mit√§ el√§m√§ tuo tullessaan",
    "totta, totta",
    "no voihan vitsi",
    "joo, n√§inh√§n se menee",
    "voi juku, kyll√§p√§ nyt",
    "vai ett√§ semmoista",
    "niin kai, niin kai",
    "no niin no, mit√§p√§ siihen sanoisi",
    "siin√§h√§n se, siin√§h√§n se",
    "no nyt on kyll√§ mielenkiintoiset puheet",
    "voi jessus, nyt on kyll√§ j√§nn√§ juttu",
    "no huh, t√§m√§p√§ uutta",
    "jep, jep",
    "no tottakai",
    "niinp√§, niinp√§",
    "kyll√§h√§n se niin menee",
    "no sep√§s jotain",
    "joo-o, niin varmaan",
    "ai ett√§, kyll√§ maailma yll√§tt√§√§",
    "no niin no, mit√§s t√§st√§ nyt sanoisi",
    "niinp√§ tietenkin",
    "juu, niin kai se on",
    "voi, voi, mit√§ viel√§",
    "jaa, niin se menee",
    "no niin, no niin",
    "kyll√§, kyll√§",
    "voi, ett√§ nyt on mielenkiintoista",
    "kappas vaan",
    "no kyll√§p√§ nyt",
    "jaa, ett√§ sellaista",
    "voi ett√§, kyll√§ maailma on ihmeellinen",
    "no niinp√§ tietenkin",
    "ai niink√∂?",
    "no jopas jotakin",
    "juu, n√§inh√§n se menee",
    "niin se on, niin se on",
    "kyll√§, kyll√§",
    "voi kuule, kaikenlaista",
    "jaa, niin kai",
    "no voi sent√§√§n",
    "voi, ett√§ nyt on juttu",
    "no niin, no niin",
    "jaa, sellaista",
    "kyll√§h√§n se niin menee",
    "no niin, no niin",
    "juu, niin kai",
    "voi ett√§, kyll√§p√§ nyt",
    "no voi vitsi",
    "joo, niin varmaan",
    "ai ett√§, kyll√§ maailma yll√§tt√§√§",
    "no niin no, mit√§s t√§st√§ nyt sanoisi",
    "niinp√§ tietenkin",
    "juu, niin kai se on",
    "voi, voi, mit√§ viel√§",
    "jaa, niin se menee",
    "no niin, no niin",
    "kyll√§, kyll√§",
    "voi, ett√§ nyt on mielenkiintoista",
    "kappas vaan",
    "no kyll√§p√§ nyt",
    "jaa, ett√§ sellaista",
    "voi ett√§, kyll√§ maailma on ihmeellinen",
    "no niinp√§ tietenkin",
    "ai niink√∂?",
    "no jopas jotakin",
];




let triggers = [
    [
        new RegExp("\\b(moi|hei|moro|terve|moikkuu|heipsulihei)\\b", 'gi'),
        [
            "miten siul menee?", 
            "miten sul menee?",
            "mit√§ kuuluu?",
            "kaikki hyvin?",
            "miten p√§iv√§si on mennyt?",
            "kuinka voit?",
            "mik√§ meno?",
            "mik√§ fiilis?",
            "hauska tavata sinut!",
            "mik√§ sinut tuo t√§nne?",
            "kuinka viikonloppusi meni?",
            "mit√§ suunnitelmia t√§lle p√§iv√§lle?",
            "mik√§ on p√§iv√§n agenda?",
        ]
    ],
    [
        new RegExp("\\b(kyll√§|joo|hyvin|ihan|t√§ss√§|ei|voi|mik√§|just|menossa)\\b", 'gi'),
        [
            "okeeiii",
            "sama!",
            "uu okeii",
            "juu",
            "jups",
            "kiva kuulla :D",
            "vai niin, mielenkiintoista",
            "ai jaa, kerro lis√§√§",
            "hmm, ymm√§rr√§n",
            "no niinp√§",
            "okei, kiva kuulla",
            "selv√§ homma",
            "ai sellaista",
            "juu, jatketaan",
            "niinp√§ niin, el√§m√§ on",
            "ahaa, okei",
            "no sep√§ j√§nn√§√§",
            "siis mit√§, kerro lis√§√§",
            "hmm, mietit√§√§n",
            "no huh, kuulostaa j√§nn√§lt√§",
            "jaa, kiinnostavaa",
            "okei, ymm√§rr√§n",
            "no huhhuh",
            "selv√§, kuulostaa hyv√§lt√§",
            "ai niink√∂, kiva kuulla",
            "hmm, enp√§ ollut ajatellutkaan",
            "jep, jep",
            "no se on hyv√§ juttu",
            "voi, ymm√§rr√§n",
            "hmm, kuulostaa haastavalta",
            "no niin, jatketaan",
            "ai ett√§, toivottavasti asiat j√§rjestyv√§t",
            "joo, aika mielenkiintoista",
            "hmm, pit√§√§ mietti√§",
            "juu, kuulostaa hyv√§lt√§",
            "okei, pidet√§√§n mieless√§",
            "juu, jatketaan siit√§",
            "selv√§, otetaan huomioon",
            "jep, n√§in on",
            "no niin, mielenkiintoista",
            "juu, ymm√§rr√§n kyll√§",
            "okei, kuulostaa j√§rkev√§lt√§",
            "hmm, mielenkiintoisia ajatuksia",
            "joo, pidet√§√§n mieless√§",
            "selv√§, kuulostaa hyv√§lt√§",
            "okei, ymm√§rr√§n kyll√§",
            "juu, kuulostaa j√§rkev√§lt√§",
            "hmm, mielenkiintoista",
            "joo, ymm√§rr√§n",
            "selv√§, kuulostaa j√§rkev√§lt√§",
            "okei, mielenkiintoista",
        ]
    ],
    [
        new RegExp("\\b(mit√§s|mit√§ s√§|miten)\\b", 'gi'),
        [
            "En kummosta", 
            "Kattelen et kui komee s√§ oot :)",
        ]
    ],
    [
        new RegExp("\\b(kiitos|kii|thx)\\b", 'gi'),
        [
            "no annatkos sun puhelinnumeron", 
            `et varmaan ole sinkku kun noin komia olet, ${storedYourProfile[0].nimi} :)`
        ]
    ],
    [
        new RegExp("\\b(s√∂p√∂|komea|kaunis|ihana)\\b", 'gi'),
        [
            "Voi kiitos, s√§kin!",
            "Lis√§√§ noita kohteliaisuuksia, tykk√§√§n!",
            "S√§ oot aika suloinen itekin üòä",
            "Stop it, you're making me blush! üòÑ",
            "Aww, kiitos, oot ihana!",
        ]
    ],
    [
        new RegExp("\\b(harrastus|harrastaks|harrastatko|vapaa-aika|lemppari)\\b", 'gi'),
        [
            "M√§ rakastan tanssimista, ent√§ s√§?",
            "Luen paljon kirjoja, mit√§ s√§ tykk√§√§t tehd√§?",
            "Elokuvat on mun juttu, sulla lempielokuva?",
            "M√§ teen paljon joogaa, miten s√§ pid√§t ittes kunnossa?",
            "Ruuanlaitto on mun intohimo, osaatko kokata?",
        ]
    ],
    [
        new RegExp("\\b(hauska|vitsi|nauraa|naurattaa|lol|haha|xd)\\b", 'gi'),
        [
            "S√§ oot aika hupaisa, tied√§tk√∂ sen?",
            "No toi oli hauska, miss√§ s√§ opit noin hyvi√§ vitsej√§?",
            "S√§ saat mut nauramaan, se on harvinaista!",
            "Ootko aina noin vitsik√§s vai vain mun seurassa?",
            "Voi ett√§, sun huumorintaju on kyll√§ 10/10!",
        ]
    ],
    [
        new RegExp("\\b(kaunis|upee|fantastinen|mahtava|kuuma|seksik√§s)\\b", 'gi'),
        [
            "Oot niin imartelevan kohtelias, kiitos!",
            "Sin√§p√§ vasta oot upea!",
            "Vau, s√§ osaat kyll√§ saada tyt√∂n punastumaan!",
            "Kiitos, s√§kin oot aika fantastinen!",
            "Olet kyll√§ charmikas, tied√§tk√∂ sen?",
        ]
    ],
    [
        new RegExp("\\b(v√§synyt|surullinen|yksin√§inen|stressaantunut|ahistaa)\\b", 'gi'),
        [
            "Halit sinulle, toivottavasti olot paranee üíï",
            "Kuulostaa rankalta, oon t√§√§ll√§ sua varten.",
            "Jos tarvitset juttuseuraa, m√§ oon t√§√§ll√§.",
            "Voi raukka, anna kun m√§ pirist√§n sua!",
            "Yhdess√§ me selvit√§√§n mist√§ vaan, muista se!",
        ]
    ],
    [
        new RegExp("\\b(suosikki|lempi|lemppari|unelma|toive)\\b", 'gi'),
        [
            "Mik√§ on sun suosikkiruoka? M√§ rakastan pasta carbonaraa!",
            "Onko sulla lempikirjaa? M√§ voisin lukea vaikka koko p√§iv√§n!",
            "Mik√§ sun unelma-ammatin olis? M√§ haaveilen kirjailijan urasta.",
            "Jos saisit yhden toiveen, mik√§ se olisi?",
            "Mik√§ on sun lempimusiikkia? M√§ kuuntelen paljon poppia.",
        ]
    ],
    [
        new RegExp("\\b(uskallatko|pystytk√∂|voitko|voikko|haaste)\\b", 'gi'),
        [
            "Uskallatko kertoa mulle salaisen unelmasi?",
            "Pystytk√∂ olemaan p√§iv√§n ilman k√§nnykk√§√§? M√§ en varmaan!",
            "Voitko olla nauramatta kun m√§ alan vitsailemaan?",
            "Haaste: kerro mulle kolme asiaa itsest√§si!",
            "Uskallatko l√§hte√§ spontaanille seikkailulle?",
        ]
    ],
    [
        new RegExp("\\b(s√§√§|viikonloppu|p√§iv√§|ilta)\\b", 'gi'),
        [
            "Onpa t√§n√§√§n ihana s√§√§, eik√∂? Mit√§ s√§ teet ulkona?",
            "Miten suunnittelet viett√§v√§si viikonlopun?",
            "Miten sun p√§iv√§ on mennyt? Toivottavasti hyvin!",
            "Mit√§ suunnitelmia sulla on t√§lle illalle?",
            "Toivottavasti s√§√§ pysyy hyv√§n√§, mit√§ mielt√§ oot?",
        ]
    ],
    [
        new RegExp("\\b(s√∂p√∂|vieh√§tt√§v√§|ihastuttava)\\b", 'gi'),
        [
            "Voi, s√§ olet niin s√∂p√∂, kun noin sanot!",
            "Oot todella vieh√§tt√§v√§, tied√§tk√∂ sen?",
            "Sin√§p√§ vasta ihastuttava olet, aivan kuin auringonpaiste!",
            "Sulla on tapa saada mut hymyilem√§√§n, oot ihana!",
            "Olet niin charmikas, se on s√∂p√∂√§!",
        ]
    ],
    [
        new RegExp("\\b(miten menee|kuinka|kui|mit√§ kuuluu|kaikki hyvin)\\b", 'gi'),
        [
            "Hyv√§√§ menee, kiitos kysym√§st√§! Ent√§ sulle?",
            "Ihan jees, p√§iv√§ on sujunut mukavasti. Mites sun p√§iv√§?",
            "Kaikki bueno, el√§m√§ hymyilee! Mitenk√§s sin√§?",
            "Voisin valittaa, mutta kuka jaksaa kuunnella? üòÑ Ent√§ s√§?",
            "Ihan ok, kiirett√§ pit√§√§. Mitenk√§s sun p√§iv√§t menee?",
            "El√§m√§ on, niin kuin on. Mit√§ uutta sulle?",
            "Tavallista arkea, mutta se on ihan jees. Miten s√§?",
            "Kyll√§h√§n t√§ss√§, selviydyt√§√§n p√§iv√§st√§ toiseen. Mitenk√§s sin√§?",
            "Hyv√§ll√§ fiiliksell√§ menn√§√§n! Mit√§s sinulle?",
        ]
    ],
];


// The `startConversation` function is used to start a conversation with the user.
function startConversation(contact){
    // The `var message` variable is used to store the message that the bot will send to the user.
    var message = greetingsTable[Math.floor(Math.random() * greetingsTable.length)];

    // The `var chatData` variable is used to store the chat data.
    var chatData = JSON.parse(localStorage.getItem(storedYourProfile[0].nimi+'-chat-' + contact) || '[]');

    // The `chatData.push()` method is used to add a new message to the chat data.
    chatData.push({
        sender: contact,
        message: message,
        timestamp: new Date().toISOString()
    });

    // The `localStorage.setItem()` method is used to store the chat data in local storage.
    localStorage.setItem(storedYourProfile[0].nimi+'-chat-' + contact, JSON.stringify(chatData));

    //updateChatMessagesDisplay(contact); // disable when project is completed
    setTimeout(() => {
        pushNotify(contact,message);
        playSound();
    }, 5000)

    if (enableAttention && isAttentionCheckInProgress === false){
        attentionCheck(contact);
    }
    
}
export {startConversation}

// The `attentionCheck()` function is used to check if the user is paying attention to the conversation.
function attentionCheck(contact){
    const attentionTime = 20;
    test.bool = false;
    isAttentionCheckInProgress = true;

    setTimeout(() => {
        // The `let contactMsgCount` variable is used to store the number of messages that the contact has sent.
        let contactMsgCount = getMessageCount(contact);

        // The `let yourMsgCount` variable is used to store the number of messages that the user has sent.
        let yourMsgCount = getMessageCount(contact,storedYourProfile[0].nimi);

        // The `if` statement is used to check if the number of messages that the contact has sent is greater than or equal to the number of messages that the user has sent.
        if (getMessageCount(contact,storedYourProfile[0].nimi) === getMessageCount(contact) || getMessageCount(contact,storedYourProfile[0].nimi) < getMessageCount(contact)){
            if (enableLogs){
                console.log("yourmsgCount:",getMessageCount(contact,storedYourProfile[0].nimi));
                console.log("contactmsgCount:",getMessageCount(contact));
            }
            
            // The `sendBotMsg()` function is used to send a message to the user.
            sendBotMsg(contact,insultsTable[Math.floor(Math.random() * insultsTable.length)]);
            //contactMsgCount += 1;
            console.log("yourmsgCount:",getMessageCount(contact,storedYourProfile[0].nimi));
                console.log("contactmsgCount:",getMessageCount(contact));
            setTimeout(() => {
                if (test.bool === true) {
                    isAttentionCheckInProgress = false;
                    console.log("paused further checks")
                    attentionCheck(contact);
                    return;
                }
                console.log("spam go brr");
                // The `if` statement is used to check if the number of messages that the contact has sent is greater than or equal to the number of messages that the user has sent.
                if (getMessageCount(contact,storedYourProfile[0].nimi) === getMessageCount(contact) || getMessageCount(contact) > getMessageCount(contact,storedYourProfile[0].nimi)){
                    // The `for` loop is used to send a message to the user.
                    for (var i = 0; i < Math.floor(Math.random() * 15) + 3; i++) {
                        setTimeout(() => {
                            sendBotMsg(contact,insultsTable[Math.floor(Math.random() * insultsTable.length)]);
                        }, Math.floor(Math.random() * 10000) + 3000);
                        
                    }
                    isAttentionCheckInProgress = false;
                }
            }, 5000); 
            return
        }   
       
        isAttentionCheckInProgress = false; 
        
          
    }, attentionTime * 1000);
    
}
export {attentionCheck}

function determineMessage(message) {
    // The `for` loop is used to iterate over the triggers array.
    for (let i = 0; i < triggers.length; i++) {
        // The `let [regex, responses]` variable is used to destructure the trigger at the current index.
        let [regex, responses] = triggers[i];

        // The `if` statement is used to check if the regex matches the message.
        if (regex.test(message)) {
            // The `let responseIndex` variable is used to store the index of the response that will be sent to the user.
            let responseIndex = Math.floor(Math.random() * responses.length);

            // The `return` statement is used to return the response that will be sent to the user.
            return responses[responseIndex];
        }
    }

    
    if (enableLogs){
        console.log("random answer triggered");
    }
    // The `return` statement is used to return a random answer.
    return  randomAnswer[Math.floor(Math.random() * randomAnswer.length)]    
}
export {determineMessage};


// The `sendBotMsg()` function is used to send a message to the user.
function sendBotMsg(contact,msg){
    var message = msg;

    // The `var chatData` variable is used to store the chat data.
    var chatData = JSON.parse(localStorage.getItem(storedYourProfile[0].nimi+'-chat-' + contact) || '[]');

    // The `chatData.push()` method is used to add a new message to the chat data.
    chatData.push({
        sender: contact,
        message: message,
        timestamp: new Date().toISOString()
    });

    // The `localStorage.setItem()` method is used to store the chat data in local storage.
    localStorage.setItem(storedYourProfile[0].nimi+'-chat-' + contact, JSON.stringify(chatData));

    // The `updateChatMessagesDisplay()` function is used to update the display of the chat messages.
    updateChatMessagesDisplay(contact);
    
    pushNotify(contact, message);
    playSound();
}
export {sendBotMsg};

// The `determineContact()` function is used to determine which contact to send a message to.
function determineContact() {
    // The `let storedProfiles` variable is used to store the list of profiles.
    let storedProfiles = JSON.parse(localStorage.getItem(storedYourProfile[0].nimi+'-Profiles'));

    if (enableAttention){
        return storedProfiles[0].firstname;
    }

    console.log(storedProfiles)

    if (storedProfiles.length > 1){
        return storedProfiles[storedProfiles.length -1].firstname;
    }
    else {
        return storedProfiles[0].firstname; 
    }

    //storedProfiles[Math.floor(Math.random() * storedProfiles.length)].firstname;
    
    
}
export {determineContact};

// The `botMessages()` function is used to send a message to the user.
function botMessages(contact) {
   //let contact = //determineContact();

   // The `var message` variable is used to store the message that will be sent to the user.
   var message = determineMessage(getLatestMessage(contact,storedYourProfile[0].nimi),);

   // The `if` statement is used to check if the enableAttention variable is true and if the attention check is not in progress.
   if (enableAttention && isAttentionCheckInProgress === false){
       if (enableLogs){
           console.log("triggered attentionCheck");
       }

       attentionCheck(contact);
   }
    
    // The `var chatData` variable is used to store the chat data.
    var chatData = JSON.parse(localStorage.getItem(storedYourProfile[0].nimi+'-chat-' + contact) || '[]');

    // The `chatData.push()` method is used to add a new message to the chat data.
    chatData.push({
        sender: contact,
        message: message,
        timestamp: new Date().toISOString()
    });

    
    
    
    
    setTimeout(() => {
        // The `const contactMessageDiv` variable is used to create a div element that will contain the message that will be sent to the user.
        const contactMessageDiv = document.createElement('div');
        contactMessageDiv.classList.add('contact-message');
    
        // The `const dotsContainer` variable is used to create a div element that will contain the dots that will be displayed while the message is being sent.
        const dotsContainer = document.createElement('section');
        dotsContainer.classList.add('dots-container');
        for (let i = 0; i < 5; i++) {
            // The `const dot` variable is used to create a div element that will represent a dot.
            const dot = document.createElement('div');
            dot.classList.add('dot');
            // The `dotsContainer.appendChild()` method is used to add the dot to the dots container.
            dotsContainer.appendChild(dot);
        }
    
        // The `var chatMessagesDiv` variable is used to store the div element that contains the chat messages.
        var chatMessagesDiv = document.getElementById(storedYourProfile[0].nimi+'-chatMessages-' + contact);
        // The `chatMessagesDiv.appendChild()` method is used to add the contact message div to the chat messages div.
        chatMessagesDiv.appendChild(contactMessageDiv);
        // The `contactMessageDiv.appendChild()` method is used to add the dots container to the contact message div.
        contactMessageDiv.appendChild(dotsContainer);
        // The `chatMessagesDiv.scrollTop` property is used to set the scroll position of the chat messages div to the bottom.
        chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight;
    }, 1500);

    setTimeout(() => {
        // The `localStorage.setItem()` method is used to store the chat data in local storage.
        localStorage.setItem(storedYourProfile[0].nimi+'-chat-' + contact, JSON.stringify(chatData));
        // The `updateChatMessagesDisplay()` function is used to update the display of the chat messages.
        updateChatMessagesDisplay(contact);
        pushNotify(contact, message);
        playSound();
    }, Math.floor(Math.random() * 7000) + 2000);
    
    
}
export {botMessages}
